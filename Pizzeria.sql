use pizzeria;

/*Product-wise analysis*/

/* Highest revenue-generation by category per item name*/

with category as (
select i.item_name, i.item_cat, round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by i.item_name, i.item_cat),
sku as (select item_name,item_cat, max(sales) as highest_sales, dense_rank() over(partition by item_cat order by max(sales) desc) as rnk
from category 
group by item_name,item_cat)
select item_name, item_cat, highest_sales from sku
where rnk =1
order by highest_sales desc;

/* Total revenue generated by category*/

select i.item_cat, round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by i.item_cat
order by sales desc;

/* Sales break-up of pizza sizes*/

with category as (
select i.item_size, round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
where item_cat like "Pizza"
group by item_size)
select item_size, sales as TotalSales from category
group by item_size;

/* Top 5 most ordered pizzas with size*/

with c as (select item_id, count(item_id) as no_of_orders from orders
group by item_id
order by 2 desc)
select item_name,item_size,no_of_orders
from c join items using(item_id)
where item_cat like "Pizza"
order by no_of_orders desc limit 5;

/* Top 5 least ordered pizzas with size*/

with c as (select item_id, count(item_id) as no_of_orders from orders
group by item_id
order by 2 desc)
select item_name,item_size,no_of_orders
from c join items using(item_id)
where item_cat like "Pizza"
order by no_of_orders asc limit 5;

/* Percentage share of pizza by orders*/

with item as (select i.item_name, count(i.item_id) as no_of_orders,
round(sum(o.quantity*i.item_price),2) as sales 
from orders o join items i using(item_id)
where i.item_cat like "Pizza"
group by i.item_name),
ordertotal as (select count(item_id) as Total from orders join items using(item_id)
where item_cat like "Pizza"),
salestotal as (select round(sum(o.quantity*i.item_price),2) as totalsales 
from orders o join items i using(item_id)
where item_cat like "Pizza")
select item_name, round((no_of_orders/Total)*100,2) as PercentofTotalOrders, 
round((sales/totalsales)*100,2) as PercentofTotalSales
from item join ordertotal join salestotal
order by 3 desc;

/*Sales by Day of Week*/
select dayname(created_at_date) as Day, round(sum(o.quantity*i.item_price)) as TotalSales
from orders o join items i using(item_id)
group by 1;

/*Sales by hour of day*/
select hour(created_at_time) as HourofDay, round(sum(o.quantity*i.item_price)) as TotalSales
from orders o join items i using(item_id)
group by 1
order by 1;

/*Cost-profit analysis of each pizza, side, dessert*/

with r as (select recipe_id, ing_id, quantity, round(quantity * (ing_price/ing_weight),2) as cost
from recipe join ingredients using(ing_id)),
s as (select recipe_id, round(sum(cost),2) as item_cost from r
group by recipe_id),
cost as (select i.item_id, s1.recipe_id, round(sum(s1.item_cost*o.quantity),2) as i_cost
from s s1 join items i on s1.recipe_id=i.sku join orders o on i.item_id=o.item_id
group by 1,2),
sales as (
select i.sku,round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by i.sku)
select s.sku, c.i_cost, s.sales, round(s.sales-c.i_cost,2) as gross_profit 
from cost c join sales s on s.sku = c.recipe_id
order by 4 desc;

/* Average orders per day*/
with c as (select count(distinct order_id) as total from orders 
group by created_at_date)
select round(avg(total)) as AverageOrdersPerDay from c;

/* Average order value*/
with c as (select round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by order_id)
select round(avg(sales),2) as AvgOrderValue from c;

/*Average quantity per order*/
with c as (select sum(quantity) as total
from orders join items using(item_id)
where item_cat like "Pizza"
group by order_id)
select round(avg(total),2) as AverageQuantityPerOrder from c;

/*Average Daily Sales*/

with c as(select round(sum(o.quantity*i.item_price) ,2)as sales
from items i join orders o on i.item_id = o.item_id
group by o.created_at_date)
select round(avg(sales),2) as AverageDailySales from c;

/*Weekly sales*/

with s as (select o.created_at_date, round(sum(o.quantity*i.item_price),2) as sales
from items i right join orders o on i.item_id = o.item_id
group by o.created_at_date
order by 1)
select week(created_at_date) as WeekNo, round(sum(sales),2) as WeeklySales from s
group by 1;


/*Customer Analysis*/

/*Top customer by revenue*/

with category as (
select add_id,cust_id, round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by cust_id,add_id),
c as (select cu.cust_fullname, c.cust_id, c.sales as highest_sales, c.add_id
from category c join customers cu using(cust_id)
group by c.cust_id,cu.cust_fullname,c.add_id
order by highest_sales desc limit 10)
select * from c join address using(add_id)
order by highest_sales desc;

/* Top repeat customers by no of orders*/

with c as (select cust_id,count(distinct order_id) as no_of_orders from orders
group by cust_id
having count(distinct order_id)>1)
select cust_id, no_of_orders, cust_fullname from c join customers using(cust_id)
order by 2 desc;

/*Revenue by city*/ 

with category as (
select add_id,round(sum(o.quantity*i.item_price),2) as sales
from items i join orders o on i.item_id = o.item_id
group by add_id)
select a.delivery_city, round(SUM(c.sales),2) as sales from category c join address a using(add_id)
group by 1
order by 2 desc;

/*Count of customers by city*/

select delivery_city, count(distinct cust_id) as NoofCustomers
from orders o join address a on o.add_id = a.add_id
group by delivery_city
order by 2 desc;